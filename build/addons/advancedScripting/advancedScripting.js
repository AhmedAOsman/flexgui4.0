function advancedScriptingService($sce,$ocLazyLoad,projectService,popupService,settingsWindowService,$rootScope,scriptManagerService,fidgetService,variableService,deviceService,projectStorageService,diagnosticsService,helpService,$timeout){return $.getScript($rootScope.addonServerUrl+"addons/advancedScripting/scripts/3rdParty/ace/src/ace.js",function(){$.getScript($rootScope.addonServerUrl+"addons/advancedScripting/scripts/3rdParty/ace/src/mode-javascript.js",function(){$ocLazyLoad.load({name:"ui.ace",files:[$rootScope.addonServerUrl+"addons/advancedScripting/scripts/3rdParty/ace/ui-ace.js"]}).then(function(){})})}),projectService.extraParamGetters.push(function(a){return a.styleSheet=projectService.styleSheet,a}),projectService.extraCleanParamGetters.push(function(a){return a.styleSheet="",a}),projectService.extraParamSetters.push(function(a){projectService.styleSheet="",a.styleSheet&&(projectService.styleSheet=a.styleSheet)}),addScreenChangeScript=function(){angular.forEach(projectService.screens,function(a){a.properties.onLoad||(a.properties.onLoad="/* onLoad script here */"),a.properties.onUnload||(a.properties.onUnload="/* onUnload script here */")})},angular.forEach(Object.keys(localization.items),function(a){localization.items[a].fidgets.properties.onLoad="On load script",localization.items[a].fidgets.properties.onUnload="On unload script",localization.items[a].settings.tabs.styleSheet={title:"Style",note:"Here you can edit the global CSS Style of your Project"},localization.items[a].help.styleSheet={title:"Style sheet",text:"Here you can edit the global CSS Style of your Project"}}),projectService.editors.onLoad=$sce.trustAsResourceUrl($rootScope.addonServerUrl+"addons/advancedScripting/views/editors/script.html"),projectService.editors.onUnload=$sce.trustAsResourceUrl($rootScope.addonServerUrl+"addons/advancedScripting/views/editors/script.html"),$rootScope.$watch(function(){return projectService.loaded},function(){addScreenChangeScript()}),$rootScope.$watch(function(){return projectService.screens.length},function(){addScreenChangeScript()}),helpService.settings.styleSheet={"for":localization.currentLocal.help.styleSheet.header,source:$rootScope.addonServerUrl+"addons/advancedScripting/views/help/styleSheet.html"},$rootScope.settingsTabs.styleSheet={help:helpService.settings.styleSheet,position:3,source:$rootScope.addonServerUrl+"addons/advancedScripting/views/settings/styleSheet.html",title:localization.currentLocal.settings.tabs.styleSheet.title,classes:"settingsScriptTab"},$rootScope.settingsTabs.project.children.push($rootScope.settingsTabs.styleSheet),$rootScope.$watch(function(){return projectService.styleSheet},function(a){$("#projectStyle").remove();var b='<style id="projectStyle">'+a+"</style>";$("head").append(b)}),$rootScope.$watch(function(){return projectService.currentScreen&&projectService.currentScreen.properties.name},function(nv,ov){var ns=projectService.findScreen(nv),os=projectService.findScreen(ov);if(os&&os.properties.onLoad)try{eval(scriptManagerService.compile(os.properties.onUnload))}catch(e){popupService.show(e.message,popupService.types.error),console.log("Unload script for screen failed to run",e)}if(ns&&ns.properties.onLoad)try{eval(scriptManagerService.compile(ns.properties.onLoad))}catch(e){popupService.show(e.message,popupService.types.error),console.log("Load script for screen failed to run",e)}}),$.getScript($rootScope.addonServerUrl+"addons/advancedScripting/scripts/controllers/scriptEditorController.js",function(){window.lazy.controller("scriptEditorController",scriptEditorController),$rootScope.$apply(function(){$rootScope.onClickEditor=$sce.trustAsResourceUrl($rootScope.addonServerUrl+"addons/advancedScripting/views/properties/onClick.html"),$rootScope.$watchCollection(function(){return fidgetService.templates},function(){angular.forEach(fidgetService.templates,function(a){void 0==a.properties.onClick&&(a.properties.onClick="")})}),projectService.changeScriptEditor={script:"/* onChange script here */",visible:!1,currentTopic:null,setCurrentTopic:function(a){projectService.changeScriptEditor.currentTopic=a,projectService.interfaceMetaData.getOnChangeScript(a.path)?this.script=projectService.interfaceMetaData.getOnChangeScript(a.path):this.script="/* onChange script here */"},setVisible:function(a,b){a&&b?(this.visible=!0,this.setCurrentTopic(b)):this.visible=!1},saveScript:function(a){projectService.interfaceMetaData.setOnChangeScript(projectService.changeScriptEditor.currentTopic.path,projectService.changeScriptEditor.script),projectService.changeScriptEditor.setVisible(!1),projectStorageService.save(!1)}},projectService.interfaceMetaData.setOnChangeScript=function(a,b){var c=this.find(a);c&&(!c&&b?(c=this.add(a),c.onChangeScript=b):c.onChangeScript=b)},projectService.interfaceMetaData.getOnChangeScript=function(a){var b=this.find(a);return null!=b&&b.onChangeScript?b.onChangeScript:null},$rootScope.settingsTabs.init.source=$rootScope.addonServerUrl+"addons/advancedScripting/views/settings/init.html",projectService.changeScripts={},settingsWindowService.interfaces={header:$sce.trustAsResourceUrl($rootScope.addonServerUrl+"addons/advancedScripting/views/settings/nodes/header.html"),item:$sce.trustAsResourceUrl($rootScope.addonServerUrl+"addons/advancedScripting/views/settings/nodes/interface.html")},$rootScope.addModal("scriptEditorWindow",$sce.trustAsResourceUrl($rootScope.addonServerUrl+"addons/advancedScripting/views/scriptEditorWindow.html"),"projectService.changeScriptEditor.visible"),diagnosticsService.scriptEditor=$sce.trustAsResourceUrl($rootScope.addonServerUrl+"addons/advancedScripting/views/settings/diagnostics/scriptEditor.html");var changed=[],lastIndex=0;changedRunnig=!1,deviceService.changedTopicWatchers.push({get:function(){return lastIndex},set:function(a){lastIndex=a}}),$rootScope.$watchCollection(function(){return deviceService.changedTopics},function(nv,ov){for(var i=lastIndex;i<deviceService.changedTopics.length;i++)changed.push(deviceService.changedTopics[i]),lastIndex++;if(!changedRunnig&&projectService.loaded){for(var i=changed.length;i--;){changedRunnig=!0;var item=changed[i];if(projectService.interfaceMetaData.getOnChangeScript(item.topic.path)){var newValue=item.topic.value,oldValue=item.oldValue;try{eval(scriptManagerService.compile(projectService.interfaceMetaData.getOnChangeScript(item.topic.path)))}catch(e){popupService.show(e.message,popupService.types.error),console.log("Change script for "+item.topic.path+" failed to run",e)}}changed.splice(i,1)}changedRunnig=!1}})})}),{}}advancedScriptingService.$inject=["$sce","$ocLazyLoad","projectService","popupService","settingsWindowService","$rootScope","scriptManagerService","fidgetService","variableService","deviceService","projectStorageService","diagnosticsService","helpService","$timeout"];